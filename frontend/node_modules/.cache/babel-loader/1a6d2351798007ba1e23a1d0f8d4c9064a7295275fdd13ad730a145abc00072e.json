{"ast":null,"code":"import axios from 'axios';\n// Configurazione base di Axios\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/api/v1',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor per gestire errori globalmente\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response$data, _error$response2, _error$response2$data, _error$response2$data2, _error$response3, _error$response4;\n  const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.errors) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.join(', ')) || error.message || 'Si è verificato un errore';\n  return Promise.reject({\n    message: errorMessage,\n    status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n    data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data\n  });\n});\nexport const taskService = {\n  // Ottieni tutti i task con paginazione\n  async getTasks(filters = {}) {\n    const cleanFilters = Object.fromEntries(Object.entries(filters).filter(([_, value]) => value !== undefined && value !== ''));\n    const response = await api.get('/tasks', {\n      params: cleanFilters\n    });\n    return response.data;\n  },\n  // Ottieni un singolo task\n  async getTask(id) {\n    const response = await api.get(`/tasks/${id}`);\n    return response.data.task;\n  },\n  // Crea un nuovo task\n  async createTask(taskData) {\n    const response = await api.post('/tasks', {\n      task: taskData\n    });\n    return response.data.task;\n  },\n  // Aggiorna un task esistente\n  async updateTask(id, taskData) {\n    const response = await api.patch(`/tasks/${id}`, {\n      task: taskData\n    });\n    return response.data.task;\n  },\n  // Elimina un task\n  async deleteTask(id) {\n    await api.delete(`/tasks/${id}`);\n  },\n  // Toggle stato completato\n  async toggleComplete(id, completed) {\n    return this.updateTask(id, {\n      completed\n    });\n  }\n};\n\n// Helper per gestire errori in modo consistente\nexport const handleApiError = error => {\n  var _error$response5, _error$response5$data, _error$response6, _error$response6$data;\n  if (error.message) return error.message;\n  if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.error) return error.response.data.error;\n  if ((_error$response6 = error.response) !== null && _error$response6 !== void 0 && (_error$response6$data = _error$response6.data) !== null && _error$response6$data !== void 0 && _error$response6$data.errors) return error.response.data.errors.join(', ');\n  return 'Si è verificato un errore imprevisto';\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","response","use","error","_error$response","_error$response$data","_error$response2","_error$response2$data","_error$response2$data2","_error$response3","_error$response4","errorMessage","data","errors","join","message","Promise","reject","status","taskService","getTasks","filters","cleanFilters","Object","fromEntries","entries","filter","_","value","undefined","get","params","getTask","id","task","createTask","taskData","post","updateTask","patch","deleteTask","delete","toggleComplete","completed","handleApiError","_error$response5","_error$response5$data","_error$response6","_error$response6$data"],"sources":["/Users/antonio/Task_Manager_API/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n    Task,\n    CreateTaskRequest,\n    UpdateTaskRequest,\n    TasksResponse,\n    TaskResponse,\n    SearchFilters\n} from '../types';\n\n// Configurazione base di Axios\nconst api = axios.create({\n    baseURL: 'http://localhost:3001/api/v1',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Interceptor per gestire errori globalmente\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        const errorMessage = error.response?.data?.error ||\n            error.response?.data?.errors?.join(', ') ||\n            error.message ||\n            'Si è verificato un errore';\n\n        return Promise.reject({\n            message: errorMessage,\n            status: error.response?.status,\n            data: error.response?.data\n        });\n    }\n);\n\nexport const taskService = {\n    // Ottieni tutti i task con paginazione\n    async getTasks(filters: SearchFilters = {}): Promise<TasksResponse> {\n        const cleanFilters = Object.fromEntries(\n            Object.entries(filters).filter(([_, value]) => value !== undefined && value !== '')\n        );\n\n        const response = await api.get<TasksResponse>('/tasks', {\n            params: cleanFilters\n        });\n        return response.data;\n    },\n\n    // Ottieni un singolo task\n    async getTask(id: number): Promise<Task> {\n        const response = await api.get<TaskResponse>(`/tasks/${id}`);\n        return response.data.task;\n    },\n\n    // Crea un nuovo task\n    async createTask(taskData: CreateTaskRequest): Promise<Task> {\n        const response = await api.post<TaskResponse>('/tasks', {\n            task: taskData\n        });\n        return response.data.task;\n    },\n\n    // Aggiorna un task esistente\n    async updateTask(id: number, taskData: UpdateTaskRequest): Promise<Task> {\n        const response = await api.patch<TaskResponse>(`/tasks/${id}`, {\n            task: taskData\n        });\n        return response.data.task;\n    },\n\n    // Elimina un task\n    async deleteTask(id: number): Promise<void> {\n        await api.delete(`/tasks/${id}`);\n    },\n\n    // Toggle stato completato\n    async toggleComplete(id: number, completed: boolean): Promise<Task> {\n        return this.updateTask(id, { completed });\n    }\n};\n\n// Helper per gestire errori in modo consistente\nexport const handleApiError = (error: any): string => {\n    if (error.message) return error.message;\n    if (error.response?.data?.error) return error.response.data.error;\n    if (error.response?.data?.errors) return error.response.data.errors.join(', ');\n    return 'Si è verificato un errore imprevisto';\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}