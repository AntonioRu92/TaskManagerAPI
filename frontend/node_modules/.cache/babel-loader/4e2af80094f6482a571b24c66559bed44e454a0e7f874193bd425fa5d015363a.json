{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { taskService } from '../services/api';\n// Initial state\nconst initialState = {\n  tasks: [],\n  currentTask: null,\n  loading: {\n    fetchTasks: 'idle',\n    fetchTask: 'idle',\n    createTask: 'idle',\n    updateTask: 'idle',\n    deleteTask: 'idle',\n    toggleComplete: 'idle'\n  },\n  error: null,\n  meta: null,\n  filters: {\n    page: 1,\n    per_page: 10\n  }\n};\n\n// Async thunks\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (filters = {}) => {\n  const response = await taskService.getTasks(filters);\n  return response;\n});\nexport const fetchTask = createAsyncThunk('tasks/fetchTask', async id => {\n  const task = await taskService.getTask(id);\n  return task;\n});\nexport const createTask = createAsyncThunk('tasks/createTask', async taskData => {\n  const task = await taskService.createTask(taskData);\n  return task;\n});\nexport const updateTask = createAsyncThunk('tasks/updateTask', async ({\n  id,\n  data\n}) => {\n  const task = await taskService.updateTask(id, data);\n  return task;\n});\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async id => {\n  await taskService.deleteTask(id);\n  return id;\n});\nexport const toggleTaskComplete = createAsyncThunk('tasks/toggleComplete', async ({\n  id,\n  completed\n}) => {\n  const task = await taskService.toggleComplete(id, completed);\n  return task;\n});\n\n// Slice\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    setCurrentTask: (state, action) => {\n      state.currentTask = action.payload;\n    },\n    clearCurrentTask: state => {\n      state.currentTask = null;\n    },\n    setFilters: (state, action) => {\n      state.filters = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch tasks\n    .addCase(fetchTasks.pending, state => {\n      state.loading.fetchTasks = 'loading';\n      state.error = null;\n    }).addCase(fetchTasks.fulfilled, (state, action) => {\n      state.loading.fetchTasks = 'idle';\n      state.tasks = action.payload.tasks;\n      state.meta = action.payload.meta;\n    }).addCase(fetchTasks.rejected, (state, action) => {\n      state.loading.fetchTasks = 'idle';\n      state.error = action.error.message || 'Errore nel caricamento dei task';\n    })\n\n    // Fetch single task\n    .addCase(fetchTask.pending, state => {\n      state.loading.fetchTask = 'loading';\n      state.error = null;\n    }).addCase(fetchTask.fulfilled, (state, action) => {\n      state.loading.fetchTask = 'idle';\n      state.currentTask = action.payload;\n    }).addCase(fetchTask.rejected, (state, action) => {\n      state.loading.fetchTask = 'idle';\n      state.error = action.error.message || 'Errore nel caricamento del task';\n    })\n\n    // Create task\n    .addCase(createTask.pending, state => {\n      state.loading.createTask = 'loading';\n      state.error = null;\n    }).addCase(createTask.fulfilled, (state, action) => {\n      state.loading.createTask = 'idle';\n      state.tasks.unshift(action.payload);\n      if (state.meta) {\n        state.meta.total_count += 1;\n      }\n    }).addCase(createTask.rejected, (state, action) => {\n      state.loading.createTask = 'idle';\n      state.error = action.error.message || 'Errore nella creazione del task';\n    })\n\n    // Update task\n    .addCase(updateTask.pending, state => {\n      state.loading.updateTask = 'loading';\n      state.error = null;\n    }).addCase(updateTask.fulfilled, (state, action) => {\n      var _state$currentTask;\n      state.loading.updateTask = 'idle';\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n      if (((_state$currentTask = state.currentTask) === null || _state$currentTask === void 0 ? void 0 : _state$currentTask.id) === action.payload.id) {\n        state.currentTask = action.payload;\n      }\n    }).addCase(updateTask.rejected, (state, action) => {\n      state.loading.updateTask = 'idle';\n      state.error = action.error.message || 'Errore nell\\'aggiornamento del task';\n    })\n\n    // Delete task\n    .addCase(deleteTask.pending, state => {\n      state.loading.deleteTask = 'loading';\n      state.error = null;\n    }).addCase(deleteTask.fulfilled, (state, action) => {\n      var _state$currentTask2;\n      state.loading.deleteTask = 'idle';\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\n      if (((_state$currentTask2 = state.currentTask) === null || _state$currentTask2 === void 0 ? void 0 : _state$currentTask2.id) === action.payload) {\n        state.currentTask = null;\n      }\n      if (state.meta) {\n        state.meta.total_count -= 1;\n      }\n    }).addCase(deleteTask.rejected, (state, action) => {\n      state.loading.deleteTask = 'idle';\n      state.error = action.error.message || 'Errore nell\\'eliminazione del task';\n    })\n\n    // Toggle complete\n    .addCase(toggleTaskComplete.pending, state => {\n      state.loading.toggleComplete = 'loading';\n      state.error = null;\n    }).addCase(toggleTaskComplete.fulfilled, (state, action) => {\n      var _state$currentTask3;\n      state.loading.toggleComplete = 'idle';\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n      if (((_state$currentTask3 = state.currentTask) === null || _state$currentTask3 === void 0 ? void 0 : _state$currentTask3.id) === action.payload.id) {\n        state.currentTask = action.payload;\n      }\n    }).addCase(toggleTaskComplete.rejected, (state, action) => {\n      state.loading.toggleComplete = 'idle';\n      state.error = action.error.message || 'Errore nell\\'aggiornamento del task';\n    });\n  }\n});\nexport const {\n  clearError,\n  setCurrentTask,\n  clearCurrentTask,\n  setFilters\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","taskService","initialState","tasks","currentTask","loading","fetchTasks","fetchTask","createTask","updateTask","deleteTask","toggleComplete","error","meta","filters","page","per_page","response","getTasks","id","task","getTask","taskData","data","toggleTaskComplete","completed","tasksSlice","name","reducers","clearError","state","setCurrentTask","action","payload","clearCurrentTask","setFilters","extraReducers","builder","addCase","pending","fulfilled","rejected","message","unshift","total_count","_state$currentTask","index","findIndex","_state$currentTask2","filter","_state$currentTask3","actions","reducer"],"sources":["/Users/antonio/Task_Manager_API/frontend/src/store/tasksSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { taskService } from '../services/api';\nimport {\n    Task,\n    TaskState,\n    CreateTaskRequest,\n    UpdateTaskRequest,\n    SearchFilters,\n    TasksResponse\n} from '../types';\n\n// Initial state\nconst initialState: TaskState = {\n    tasks: [],\n    currentTask: null,\n    loading: {\n        fetchTasks: 'idle',\n        fetchTask: 'idle',\n        createTask: 'idle',\n        updateTask: 'idle',\n        deleteTask: 'idle',\n        toggleComplete: 'idle'\n    },\n    error: null,\n    meta: null,\n    filters: {\n        page: 1,\n        per_page: 10\n    }\n};\n\n// Async thunks\nexport const fetchTasks = createAsyncThunk(\n    'tasks/fetchTasks',\n    async (filters: SearchFilters = {}) => {\n        const response = await taskService.getTasks(filters);\n        return response;\n    }\n);\n\nexport const fetchTask = createAsyncThunk(\n    'tasks/fetchTask',\n    async (id: number) => {\n        const task = await taskService.getTask(id);\n        return task;\n    }\n);\n\nexport const createTask = createAsyncThunk(\n    'tasks/createTask',\n    async (taskData: CreateTaskRequest) => {\n        const task = await taskService.createTask(taskData);\n        return task;\n    }\n);\n\nexport const updateTask = createAsyncThunk(\n    'tasks/updateTask',\n    async ({ id, data }: { id: number; data: UpdateTaskRequest }) => {\n        const task = await taskService.updateTask(id, data);\n        return task;\n    }\n);\n\nexport const deleteTask = createAsyncThunk(\n    'tasks/deleteTask',\n    async (id: number) => {\n        await taskService.deleteTask(id);\n        return id;\n    }\n);\n\nexport const toggleTaskComplete = createAsyncThunk(\n    'tasks/toggleComplete',\n    async ({ id, completed }: { id: number; completed: boolean }) => {\n        const task = await taskService.toggleComplete(id, completed);\n        return task;\n    }\n);\n\n// Slice\nconst tasksSlice = createSlice({\n    name: 'tasks',\n    initialState,\n    reducers: {\n        clearError: (state) => {\n            state.error = null;\n        },\n        setCurrentTask: (state, action: PayloadAction<Task | null>) => {\n            state.currentTask = action.payload;\n        },\n        clearCurrentTask: (state) => {\n            state.currentTask = null;\n        },\n        setFilters: (state, action: PayloadAction<SearchFilters>) => {\n            state.filters = action.payload;\n        }\n    },\n    extraReducers: (builder) => {\n        builder\n            // Fetch tasks\n            .addCase(fetchTasks.pending, (state) => {\n                state.loading.fetchTasks = 'loading';\n                state.error = null;\n            })\n            .addCase(fetchTasks.fulfilled, (state, action: PayloadAction<TasksResponse>) => {\n                state.loading.fetchTasks = 'idle';\n                state.tasks = action.payload.tasks;\n                state.meta = action.payload.meta;\n            })\n            .addCase(fetchTasks.rejected, (state, action) => {\n                state.loading.fetchTasks = 'idle';\n                state.error = action.error.message || 'Errore nel caricamento dei task';\n            })\n\n            // Fetch single task\n            .addCase(fetchTask.pending, (state) => {\n                state.loading.fetchTask = 'loading';\n                state.error = null;\n            })\n            .addCase(fetchTask.fulfilled, (state, action: PayloadAction<Task>) => {\n                state.loading.fetchTask = 'idle';\n                state.currentTask = action.payload;\n            })\n            .addCase(fetchTask.rejected, (state, action) => {\n                state.loading.fetchTask = 'idle';\n                state.error = action.error.message || 'Errore nel caricamento del task';\n            })\n\n            // Create task\n            .addCase(createTask.pending, (state) => {\n                state.loading.createTask = 'loading';\n                state.error = null;\n            })\n            .addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\n                state.loading.createTask = 'idle';\n                state.tasks.unshift(action.payload);\n                if (state.meta) {\n                    state.meta.total_count += 1;\n                }\n            })\n            .addCase(createTask.rejected, (state, action) => {\n                state.loading.createTask = 'idle';\n                state.error = action.error.message || 'Errore nella creazione del task';\n            })\n\n            // Update task\n            .addCase(updateTask.pending, (state) => {\n                state.loading.updateTask = 'loading';\n                state.error = null;\n            })\n            .addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\n                state.loading.updateTask = 'idle';\n                const index = state.tasks.findIndex(task => task.id === action.payload.id);\n                if (index !== -1) {\n                    state.tasks[index] = action.payload;\n                }\n                if (state.currentTask?.id === action.payload.id) {\n                    state.currentTask = action.payload;\n                }\n            })\n            .addCase(updateTask.rejected, (state, action) => {\n                state.loading.updateTask = 'idle';\n                state.error = action.error.message || 'Errore nell\\'aggiornamento del task';\n            })\n\n            // Delete task\n            .addCase(deleteTask.pending, (state) => {\n                state.loading.deleteTask = 'loading';\n                state.error = null;\n            })\n            .addCase(deleteTask.fulfilled, (state, action: PayloadAction<number>) => {\n                state.loading.deleteTask = 'idle';\n                state.tasks = state.tasks.filter(task => task.id !== action.payload);\n                if (state.currentTask?.id === action.payload) {\n                    state.currentTask = null;\n                }\n                if (state.meta) {\n                    state.meta.total_count -= 1;\n                }\n            })\n            .addCase(deleteTask.rejected, (state, action) => {\n                state.loading.deleteTask = 'idle';\n                state.error = action.error.message || 'Errore nell\\'eliminazione del task';\n            })\n\n            // Toggle complete\n            .addCase(toggleTaskComplete.pending, (state) => {\n                state.loading.toggleComplete = 'loading';\n                state.error = null;\n            })\n            .addCase(toggleTaskComplete.fulfilled, (state, action: PayloadAction<Task>) => {\n                state.loading.toggleComplete = 'idle';\n                const index = state.tasks.findIndex(task => task.id === action.payload.id);\n                if (index !== -1) {\n                    state.tasks[index] = action.payload;\n                }\n                if (state.currentTask?.id === action.payload.id) {\n                    state.currentTask = action.payload;\n                }\n            })\n            .addCase(toggleTaskComplete.rejected, (state, action) => {\n                state.loading.toggleComplete = 'idle';\n                state.error = action.error.message || 'Errore nell\\'aggiornamento del task';\n            });\n    }\n});\n\nexport const {\n    clearError,\n    setCurrentTask,\n    clearCurrentTask,\n    setFilters\n} = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,SAASC,WAAW,QAAQ,iBAAiB;AAU7C;AACA,MAAMC,YAAuB,GAAG;EAC5BC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,IAAI;EACjBC,OAAO,EAAE;IACLC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE,MAAM;IACjBC,UAAU,EAAE,MAAM;IAClBC,UAAU,EAAE,MAAM;IAClBC,UAAU,EAAE,MAAM;IAClBC,cAAc,EAAE;EACpB,CAAC;EACDC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE;IACLC,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACd;AACJ,CAAC;;AAED;AACA,OAAO,MAAMV,UAAU,GAAGN,gBAAgB,CACtC,kBAAkB,EAClB,OAAOc,OAAsB,GAAG,CAAC,CAAC,KAAK;EACnC,MAAMG,QAAQ,GAAG,MAAMhB,WAAW,CAACiB,QAAQ,CAACJ,OAAO,CAAC;EACpD,OAAOG,QAAQ;AACnB,CACJ,CAAC;AAED,OAAO,MAAMV,SAAS,GAAGP,gBAAgB,CACrC,iBAAiB,EACjB,MAAOmB,EAAU,IAAK;EAClB,MAAMC,IAAI,GAAG,MAAMnB,WAAW,CAACoB,OAAO,CAACF,EAAE,CAAC;EAC1C,OAAOC,IAAI;AACf,CACJ,CAAC;AAED,OAAO,MAAMZ,UAAU,GAAGR,gBAAgB,CACtC,kBAAkB,EAClB,MAAOsB,QAA2B,IAAK;EACnC,MAAMF,IAAI,GAAG,MAAMnB,WAAW,CAACO,UAAU,CAACc,QAAQ,CAAC;EACnD,OAAOF,IAAI;AACf,CACJ,CAAC;AAED,OAAO,MAAMX,UAAU,GAAGT,gBAAgB,CACtC,kBAAkB,EAClB,OAAO;EAAEmB,EAAE;EAAEI;AAA8C,CAAC,KAAK;EAC7D,MAAMH,IAAI,GAAG,MAAMnB,WAAW,CAACQ,UAAU,CAACU,EAAE,EAAEI,IAAI,CAAC;EACnD,OAAOH,IAAI;AACf,CACJ,CAAC;AAED,OAAO,MAAMV,UAAU,GAAGV,gBAAgB,CACtC,kBAAkB,EAClB,MAAOmB,EAAU,IAAK;EAClB,MAAMlB,WAAW,CAACS,UAAU,CAACS,EAAE,CAAC;EAChC,OAAOA,EAAE;AACb,CACJ,CAAC;AAED,OAAO,MAAMK,kBAAkB,GAAGxB,gBAAgB,CAC9C,sBAAsB,EACtB,OAAO;EAAEmB,EAAE;EAAEM;AAA8C,CAAC,KAAK;EAC7D,MAAML,IAAI,GAAG,MAAMnB,WAAW,CAACU,cAAc,CAACQ,EAAE,EAAEM,SAAS,CAAC;EAC5D,OAAOL,IAAI;AACf,CACJ,CAAC;;AAED;AACA,MAAMM,UAAU,GAAG3B,WAAW,CAAC;EAC3B4B,IAAI,EAAE,OAAO;EACbzB,YAAY;EACZ0B,QAAQ,EAAE;IACNC,UAAU,EAAGC,KAAK,IAAK;MACnBA,KAAK,CAAClB,KAAK,GAAG,IAAI;IACtB,CAAC;IACDmB,cAAc,EAAEA,CAACD,KAAK,EAAEE,MAAkC,KAAK;MAC3DF,KAAK,CAAC1B,WAAW,GAAG4B,MAAM,CAACC,OAAO;IACtC,CAAC;IACDC,gBAAgB,EAAGJ,KAAK,IAAK;MACzBA,KAAK,CAAC1B,WAAW,GAAG,IAAI;IAC5B,CAAC;IACD+B,UAAU,EAAEA,CAACL,KAAK,EAAEE,MAAoC,KAAK;MACzDF,KAAK,CAAChB,OAAO,GAAGkB,MAAM,CAACC,OAAO;IAClC;EACJ,CAAC;EACDG,aAAa,EAAGC,OAAO,IAAK;IACxBA;IACI;IAAA,CACCC,OAAO,CAAChC,UAAU,CAACiC,OAAO,EAAGT,KAAK,IAAK;MACpCA,KAAK,CAACzB,OAAO,CAACC,UAAU,GAAG,SAAS;MACpCwB,KAAK,CAAClB,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACD0B,OAAO,CAAChC,UAAU,CAACkC,SAAS,EAAE,CAACV,KAAK,EAAEE,MAAoC,KAAK;MAC5EF,KAAK,CAACzB,OAAO,CAACC,UAAU,GAAG,MAAM;MACjCwB,KAAK,CAAC3B,KAAK,GAAG6B,MAAM,CAACC,OAAO,CAAC9B,KAAK;MAClC2B,KAAK,CAACjB,IAAI,GAAGmB,MAAM,CAACC,OAAO,CAACpB,IAAI;IACpC,CAAC,CAAC,CACDyB,OAAO,CAAChC,UAAU,CAACmC,QAAQ,EAAE,CAACX,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAACzB,OAAO,CAACC,UAAU,GAAG,MAAM;MACjCwB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAAC8B,OAAO,IAAI,iCAAiC;IAC3E,CAAC;;IAED;IAAA,CACCJ,OAAO,CAAC/B,SAAS,CAACgC,OAAO,EAAGT,KAAK,IAAK;MACnCA,KAAK,CAACzB,OAAO,CAACE,SAAS,GAAG,SAAS;MACnCuB,KAAK,CAAClB,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACD0B,OAAO,CAAC/B,SAAS,CAACiC,SAAS,EAAE,CAACV,KAAK,EAAEE,MAA2B,KAAK;MAClEF,KAAK,CAACzB,OAAO,CAACE,SAAS,GAAG,MAAM;MAChCuB,KAAK,CAAC1B,WAAW,GAAG4B,MAAM,CAACC,OAAO;IACtC,CAAC,CAAC,CACDK,OAAO,CAAC/B,SAAS,CAACkC,QAAQ,EAAE,CAACX,KAAK,EAAEE,MAAM,KAAK;MAC5CF,KAAK,CAACzB,OAAO,CAACE,SAAS,GAAG,MAAM;MAChCuB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAAC8B,OAAO,IAAI,iCAAiC;IAC3E,CAAC;;IAED;IAAA,CACCJ,OAAO,CAAC9B,UAAU,CAAC+B,OAAO,EAAGT,KAAK,IAAK;MACpCA,KAAK,CAACzB,OAAO,CAACG,UAAU,GAAG,SAAS;MACpCsB,KAAK,CAAClB,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACD0B,OAAO,CAAC9B,UAAU,CAACgC,SAAS,EAAE,CAACV,KAAK,EAAEE,MAA2B,KAAK;MACnEF,KAAK,CAACzB,OAAO,CAACG,UAAU,GAAG,MAAM;MACjCsB,KAAK,CAAC3B,KAAK,CAACwC,OAAO,CAACX,MAAM,CAACC,OAAO,CAAC;MACnC,IAAIH,KAAK,CAACjB,IAAI,EAAE;QACZiB,KAAK,CAACjB,IAAI,CAAC+B,WAAW,IAAI,CAAC;MAC/B;IACJ,CAAC,CAAC,CACDN,OAAO,CAAC9B,UAAU,CAACiC,QAAQ,EAAE,CAACX,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAACzB,OAAO,CAACG,UAAU,GAAG,MAAM;MACjCsB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAAC8B,OAAO,IAAI,iCAAiC;IAC3E,CAAC;;IAED;IAAA,CACCJ,OAAO,CAAC7B,UAAU,CAAC8B,OAAO,EAAGT,KAAK,IAAK;MACpCA,KAAK,CAACzB,OAAO,CAACI,UAAU,GAAG,SAAS;MACpCqB,KAAK,CAAClB,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACD0B,OAAO,CAAC7B,UAAU,CAAC+B,SAAS,EAAE,CAACV,KAAK,EAAEE,MAA2B,KAAK;MAAA,IAAAa,kBAAA;MACnEf,KAAK,CAACzB,OAAO,CAACI,UAAU,GAAG,MAAM;MACjC,MAAMqC,KAAK,GAAGhB,KAAK,CAAC3B,KAAK,CAAC4C,SAAS,CAAC3B,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKa,MAAM,CAACC,OAAO,CAACd,EAAE,CAAC;MAC1E,IAAI2B,KAAK,KAAK,CAAC,CAAC,EAAE;QACdhB,KAAK,CAAC3B,KAAK,CAAC2C,KAAK,CAAC,GAAGd,MAAM,CAACC,OAAO;MACvC;MACA,IAAI,EAAAY,kBAAA,GAAAf,KAAK,CAAC1B,WAAW,cAAAyC,kBAAA,uBAAjBA,kBAAA,CAAmB1B,EAAE,MAAKa,MAAM,CAACC,OAAO,CAACd,EAAE,EAAE;QAC7CW,KAAK,CAAC1B,WAAW,GAAG4B,MAAM,CAACC,OAAO;MACtC;IACJ,CAAC,CAAC,CACDK,OAAO,CAAC7B,UAAU,CAACgC,QAAQ,EAAE,CAACX,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAACzB,OAAO,CAACI,UAAU,GAAG,MAAM;MACjCqB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAAC8B,OAAO,IAAI,qCAAqC;IAC/E,CAAC;;IAED;IAAA,CACCJ,OAAO,CAAC5B,UAAU,CAAC6B,OAAO,EAAGT,KAAK,IAAK;MACpCA,KAAK,CAACzB,OAAO,CAACK,UAAU,GAAG,SAAS;MACpCoB,KAAK,CAAClB,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACD0B,OAAO,CAAC5B,UAAU,CAAC8B,SAAS,EAAE,CAACV,KAAK,EAAEE,MAA6B,KAAK;MAAA,IAAAgB,mBAAA;MACrElB,KAAK,CAACzB,OAAO,CAACK,UAAU,GAAG,MAAM;MACjCoB,KAAK,CAAC3B,KAAK,GAAG2B,KAAK,CAAC3B,KAAK,CAAC8C,MAAM,CAAC7B,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKa,MAAM,CAACC,OAAO,CAAC;MACpE,IAAI,EAAAe,mBAAA,GAAAlB,KAAK,CAAC1B,WAAW,cAAA4C,mBAAA,uBAAjBA,mBAAA,CAAmB7B,EAAE,MAAKa,MAAM,CAACC,OAAO,EAAE;QAC1CH,KAAK,CAAC1B,WAAW,GAAG,IAAI;MAC5B;MACA,IAAI0B,KAAK,CAACjB,IAAI,EAAE;QACZiB,KAAK,CAACjB,IAAI,CAAC+B,WAAW,IAAI,CAAC;MAC/B;IACJ,CAAC,CAAC,CACDN,OAAO,CAAC5B,UAAU,CAAC+B,QAAQ,EAAE,CAACX,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAACzB,OAAO,CAACK,UAAU,GAAG,MAAM;MACjCoB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAAC8B,OAAO,IAAI,oCAAoC;IAC9E,CAAC;;IAED;IAAA,CACCJ,OAAO,CAACd,kBAAkB,CAACe,OAAO,EAAGT,KAAK,IAAK;MAC5CA,KAAK,CAACzB,OAAO,CAACM,cAAc,GAAG,SAAS;MACxCmB,KAAK,CAAClB,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACD0B,OAAO,CAACd,kBAAkB,CAACgB,SAAS,EAAE,CAACV,KAAK,EAAEE,MAA2B,KAAK;MAAA,IAAAkB,mBAAA;MAC3EpB,KAAK,CAACzB,OAAO,CAACM,cAAc,GAAG,MAAM;MACrC,MAAMmC,KAAK,GAAGhB,KAAK,CAAC3B,KAAK,CAAC4C,SAAS,CAAC3B,IAAI,IAAIA,IAAI,CAACD,EAAE,KAAKa,MAAM,CAACC,OAAO,CAACd,EAAE,CAAC;MAC1E,IAAI2B,KAAK,KAAK,CAAC,CAAC,EAAE;QACdhB,KAAK,CAAC3B,KAAK,CAAC2C,KAAK,CAAC,GAAGd,MAAM,CAACC,OAAO;MACvC;MACA,IAAI,EAAAiB,mBAAA,GAAApB,KAAK,CAAC1B,WAAW,cAAA8C,mBAAA,uBAAjBA,mBAAA,CAAmB/B,EAAE,MAAKa,MAAM,CAACC,OAAO,CAACd,EAAE,EAAE;QAC7CW,KAAK,CAAC1B,WAAW,GAAG4B,MAAM,CAACC,OAAO;MACtC;IACJ,CAAC,CAAC,CACDK,OAAO,CAACd,kBAAkB,CAACiB,QAAQ,EAAE,CAACX,KAAK,EAAEE,MAAM,KAAK;MACrDF,KAAK,CAACzB,OAAO,CAACM,cAAc,GAAG,MAAM;MACrCmB,KAAK,CAAClB,KAAK,GAAGoB,MAAM,CAACpB,KAAK,CAAC8B,OAAO,IAAI,qCAAqC;IAC/E,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EACTb,UAAU;EACVE,cAAc;EACdG,gBAAgB;EAChBC;AACJ,CAAC,GAAGT,UAAU,CAACyB,OAAO;AAEtB,eAAezB,UAAU,CAAC0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}